import java.util.ArrayList;

import edu.princeton.cs.algs4.Point2D;
import edu.princeton.cs.algs4.RectHV;
import edu.princeton.cs.algs4.StdDraw;

public class KdTree {
    
    private static class Node {
        private Point2D p;      // the point
        private RectHV rect;    // the axis-aligned rectangle corresponding to this node
        private Node lb;        // the left/bottom subtree
        private Node rt;        // the right/top subtree
        private Node(Point2D point2D, RectHV rectHV) {
            p = point2D;
            rect = rectHV;
        }
     }
    
    private int size;
    private Node root;
    
    public KdTree() {
        // construct an empty set of points 
    }
    public boolean isEmpty() {
        // is the set empty? 
        return size == 0;
    }
    public int size() {
        // number of points in the set 
        return size;
    }
    public void insert(Point2D p) {
        // add the point to the set (if it is not already in the set)
        if (p == null) throw new NullPointerException("first argument to insert() is null");
        RectHV rect = new RectHV(0, 0, 1, 1);
        root = insert(root, p, rect, true);
    }
    
    private Node insert(Node node, Point2D p, RectHV rect, boolean vertical) {
        if (node == null) {
            size++;
            return new Node(p, rect);
        }
        if (vertical) {
            double cmp = p.x()- node.p.x();
            if (cmp < 0) {
                RectHV left = new RectHV(rect.xmin(), rect.ymin(), p.x(), rect.ymax());
                node.lb  = insert(node.lb, p, left, false);
            }
            else if (cmp > 0 || (cmp == 0 && p.y()- node.p.y() != 0)) {
                RectHV right = new RectHV(p.x(), rect.ymin(), rect.xmax(), rect.ymax());
                node.rt = insert(node.rt, p, right, false);
            }
        }
        else {
            double cmp = p.y()- node.p.y();
            if (cmp < 0) {
                RectHV top = new RectHV(rect.xmin(), rect.ymin(), rect.xmax(), p.y());
                node.lb  = insert(node.lb, p, top, true);
            }
            if (cmp > 0 || (cmp == 0 && p.x()- node.p.x() != 0)) {
                RectHV bottom = new RectHV(rect.xmin(), p.y(), rect.xmax(), rect.ymax());
                node.rt = insert(node.rt, p, bottom, true);
            }
        }
        return node;
    }
    
    public boolean contains(Point2D p) {
        // does the set contain point p? 
        if (p == null) throw new NullPointerException("argument to contains() is null");
        return get(root, p, true) != null;
    }
    
    private Point2D get(Node node, Point2D p, boolean vertical) {
        if (node == null) return null;
        if (vertical) {
            double cmp = p.x() - node.p.x();
            if  (cmp < 0) return get(node.lb, p, false);
            else if (cmp > 0 || p.y()- node.p.y() != 0) return get(node.rt, p, false);
            else return node.p;
        }
        else {
            double cmp = p.y() - node.p.y();
            if  (cmp < 0) return get(node.lb, p, true);
            else if (cmp > 0 || p.x()- node.p.x() != 0) return get(node.rt, p, true);
            else return node.p;
        }
    }
    
    
    public void draw() {
        // draw all points to standard draw 
        draw(root, true);
    }
    
    private void draw(Node node, boolean vertical) {
        if (node == null) return;
        StdDraw.setPenColor(StdDraw.BLACK);
        StdDraw.setPenRadius(0.01);
        node.p.draw();
        StdDraw.setPenRadius();
        if (vertical) {
            StdDraw.setPenColor(StdDraw.RED);
            StdDraw.line(node.p.x(), node.rect.ymin(), node.p.x(), node.rect.ymax());
        }
        else {
            StdDraw.setPenColor(StdDraw.BLUE);
            StdDraw.line(node.rect.xmin(), node.p.y(), node.rect.xmax(), node.p.y());
        }
        draw(node.lb, !vertical);
        draw(node.rt, !vertical);
    }
    
    public Iterable<Point2D> range(RectHV rect) {
        // all points that are inside the rectangle
        if (rect == null) throw new java.lang.NullPointerException();
        ArrayList<Point2D> list = new ArrayList<Point2D>();
        range(rect, root, list);
        return list;
    }
    private void range(RectHV rect, Node node, ArrayList<Point2D> list) {
        if (node == null || rect.intersects(node.rect)) return;
        if (rect.contains(node.p)) list.add(node.p);
        range(rect, node.lb, list);
        range(rect, node.rt, list);
    }
    
    private double min;
    private Point2D near;
    public Point2D nearest(Point2D p) {
        // a nearest neighbor in the set to point p; null if the set is empty 
        if (p == null) throw new java.lang.NullPointerException();
        min = 0;
        near = null;
        nearest(p, root, true);
    }
    
    private void nearest(Point2D p, Node node, boolean vertical) {
        if (node == null || min < node.rect.distanceSquaredTo(p)) return;
        double distance = p.distanceSquaredTo(node.p);
        if (distance < min) {
            min = distance;
            near = node.p;
        }
        if (vertical) {
            if (p.x() < node.p.x()) {
                nearest(p, node.lb, false);
                nearest(p, node.rt, false);
            }
            else {
                nearest(p, node.rt, false);
                nearest(p, node.lb, false);
            }
        }
        else {
            if (p.y() < node.p.y()) {
                nearest(p, node.lb, true);
                nearest(p, node.rt, true);
            }
            else {
                nearest(p, node.rt, true);
                nearest(p, node.lb, true);
            }
        }
        
    }

    public static void main(String[] args) {
        // unit testing of the methods (optional) 
    }
}
