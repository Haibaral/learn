import edu.princeton.cs.algs4.Point2D;
import edu.princeton.cs.algs4.RectHV;
import edu.princeton.cs.algs4.SET;

public class PointSET {
   private SET<Point2D> _points;
   public         PointSET() {
       // construct an empty set of points 
       _points = new SET<Point2D>();
   }
   public boolean isEmpty() {
       // is the set empty? 
       return _points.isEmpty();
   }
   public int size() {
       // number of points in the set 
       return _points.size();
   }
   public void insert(Point2D p) {
       // add the point to the set (if it is not already in the set)
       _points.add(p);
   }
   public boolean contains(Point2D p) {
       // does the set contain point p? 
       return _points.contains(p);
   }
   public void draw() {
       // draw all points to standard draw 
       for (Point2D p:_points) {
           p.draw();
       }
   }
   public Iterable<Point2D> range(RectHV rect) {
       // all points that are inside the rectangle 
       if (rect == null) throw new java.lang.NullPointerException();
   }
   public Point2D nearest(Point2D p) {
       // a nearest neighbor in the set to point p; null if the set is empty 
       if (p == null) throw new java.lang.NullPointerException();
       double max = 0;
       Point2D nearest;
       for (Point2D q:_points) {
           double distance = q.distanceTo(p)
           if ( distance > max) {
               max = distance;
               nearest = q;
           }
       }
       return nearest;
   }

   public static void main(String[] args) {
       // unit testing of the methods (optional) 
   }
}