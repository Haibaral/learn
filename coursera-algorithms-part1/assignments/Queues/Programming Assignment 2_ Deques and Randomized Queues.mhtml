From: <Saved by Blink>
Subject: Programming Assignment 2: Deques and Randomized Queues
Date: Tue, 31 Oct 2016 16:04:19 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--1u92IoXnI4ophddh9nX4Ya4zcBOrubzaJ39zkw4SCb----"

------MultipartBoundary--1u92IoXnI4ophddh9nX4Ya4zcBOrubzaJ39zkw4SCb----
Content-Type: text/html
Content-ID: <frame-19-978dbfdf-8440-471d-a37a-02e4e524858c@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: http://coursera.cs.princeton.edu/algs4/assignments/queues.html

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"><html><head><meta ht=
tp-equiv=3D"Content-Type" content=3D"text/html; charset=3DUTF-8">

<title>
Programming Assignment 2: Deques and Randomized Queues
</title><style id=3D"style-1-cropbar-clipper">/* Copyright 2014 Evernote Co=
rporation. All rights reserved. */
.en-markup-crop-options {
    top: 18px !important;
    left: 50% !important;
    margin-left: -100px !important;
    width: 200px !important;
    border: 2px rgba(255,255,255,.38) solid !important;
    border-radius: 4px !important;
}

.en-markup-crop-options div div:first-of-type {
    margin-left: 0px !important;
}
</style></head>

<body>
<h2>Programming Assignment 2: Deques and Randomized Queues</h2>

<p>

Write a generic data type for a deque and a randomized queue.
The goal of this assignment is to implement elementary data structures
using arrays and linked lists, and to introduce you to generics and
iterators.

</p><p>
<b>Dequeue.</b>
A <em>double-ended queue</em> or <em>deque</em> (pronounced "deck")
is a generalization of a=20
stack and a queue that supports adding and removing items=20
from either the front or the back of the data structure.
Create a generic data type <tt>Deque</tt> that implements the following API=
:

</p><blockquote>
<pre><b>public class Deque&lt;Item&gt; implements Iterable&lt;Item&gt; {</b=
>
<b>   public Deque()                           </b><font color=3D"gray">// =
construct an empty deque</font>
<b>   public boolean isEmpty()                 </b><font color=3D"gray">// =
is the deque empty?</font>
<b>   public int size()                        </b><font color=3D"gray">// =
return the number of items on the deque</font>
<b>   public void addFirst(Item item)          </b><font color=3D"gray">// =
add the item to the front</font>
<b>   public void addLast(Item item)           </b><font color=3D"gray">// =
add the item to the end</font>
<b>   public Item removeFirst()                </b><font color=3D"gray">// =
remove and return the item from the front</font>
<b>   public Item removeLast()                 </b><font color=3D"gray">// =
remove and return the item from the end</font>
<b>   public Iterator&lt;Item&gt; iterator()         </b><font color=3D"gra=
y">// return an iterator over items in order from front to end</font>
<b>   public static void main(String[] args)   </b><font color=3D"gray">// =
unit testing</font>
<b>}</b>
</pre>
</blockquote>


<p><em>Corner cases.</em>
Throw a <tt>java.lang.NullPointerException</tt>
if the client attempts to add a null item;
throw a <tt>java.util.NoSuchElementException</tt>
if the client attempts to remove an item from an empty deque;
throw a <tt>java.lang.UnsupportedOperationException</tt> if the client call=
s
the <tt>remove()</tt> method in the iterator;
throw a <tt>java.util.NoSuchElementException</tt> if the client calls the <=
tt>next()</tt>
method in the iterator and there are no more items to return.

</p><p><em>Performance requirements.</em> &nbsp;
Your deque implementation must support each deque operation
in <em>constant worst-case time</em>.
A deque containing <em>n</em> items must use at most 48<em>n</em> + 192 byt=
es of memory.
and use space proportional to the number of items <em>currently</em> in
the deque.
Additionally, your iterator implementation must support
each operation (including construction) in <em>constant worst-case time</em=
>.



</p><p><b>Randomized queue.</b>
A <em>randomized queue</em> is similar to a stack or queue, except that
the item removed is chosen uniformly at random from items in
the data structure.
Create a generic data type <tt>RandomizedQueue</tt>
that implements the following API:

</p><blockquote>
<pre><b>public class RandomizedQueue&lt;Item&gt; implements Iterable&lt;Ite=
m&gt; {</b>
<b>   public RandomizedQueue()                 </b><font color=3D"gray">// =
construct an empty randomized queue</font>
<b>   public boolean isEmpty()                 </b><font color=3D"gray">// =
is the queue empty?</font>
<b>   public int size()                        </b><font color=3D"gray">// =
return the number of items on the queue</font>
<b>   public void enqueue(Item item)           </b><font color=3D"gray">// =
add the item</font>
<b>   public Item dequeue()                    </b><font color=3D"gray">// =
remove and return a random item</font>
<b>   public Item sample()                     </b><font color=3D"gray">// =
return (but do not remove) a random item</font>
<b>   public Iterator&lt;Item&gt; iterator()         </b><font color=3D"gra=
y">// return an independent iterator over items in random order</font>
<b>   public static void main(String[] args)   </b><font color=3D"gray">// =
unit testing</font>
<b>}</b>
</pre> =20
</blockquote>


<p><em>Corner cases.</em>
The order of two or more iterators to the same randomized queue must be
<em>mutually independent</em>; each iterator must maintain its own random o=
rder.
Throw a <tt>java.lang.NullPointerException</tt>
if the client attempts to add a null item;
throw a <tt>java.util.NoSuchElementException</tt>
if the client attempts to sample or dequeue an item from an empty randomize=
d queue;
throw a <tt>java.lang.UnsupportedOperationException</tt> if the client call=
s
the <tt>remove()</tt> method in the iterator;
throw a <tt>java.util.NoSuchElementException</tt> if the client calls the <=
tt>next()</tt>
method in the iterator and there are no more items to return.



</p><p><em>Performance requirements.</em>
Your randomized queue implementation must support each randomized queue ope=
ration
(besides creating an iterator) in <em>constant amortized time</em>.
That is, any sequence of <em>m</em> randomized queue operations (starting f=
rom
an empty queue) should take at most <em>cm</em> steps in the worst case,
for some constant <em>c</em>.
A randomized queue containing <em>n</em> items must use at most
48<em>n</em> + 192 bytes of memory.
Additionally, your iterator implementation must support=20
operations <tt>next()</tt> and <tt>hasNext()</tt> in <em>constant worst-cas=
e time</em>;
and construction in <em>linear time</em>; you may (and will need to) use a
linear amount of extra memory per iterator.





</p><p>
<b>Subset client.</b>

Write a client program <tt>Subset.java</tt> that takes a
command-line integer <em>k</em>; reads in a sequence of
<em>N</em> strings from standard input using <tt>StdIn.readString()</tt>;
and prints out exactly <em>k</em> of them, uniformly at random.
Each item from the sequence can be printed out at most once.
You may assume that 0 =E2=89=A4 <em>k</em> =E2=89=A4 <em>n</em>, where <em>=
n</em>
is  the number of string on standard input.

</p><blockquote>
<pre>% <b>echo A B C D E F G H I | java Subset 3</b>       % <b>echo AA BB =
BB BB BB BB CC CC | java Subset 8</b>
C                                              BB
G                                              AA
A                                              BB
                                               CC
% <b>echo A B C D E F G H I | java Subset 3</b>       BB
E                                              BB
F                                              CC
G                                              BB
</pre>
</blockquote>


The running time of <tt>Subset</tt> must be linear in the size of the input=
.
You may use only a constant amount of memory plus either
one <tt>Deque</tt> or <tt>RandomizedQueue</tt> object of maximum size at mo=
st <em>n</em>,
where <em>n</em> is the number of strings on standard input.
(For an extra challenge, use only one <tt>Deque</tt> or <tt>RandomizedQueue=
</tt> object of maximum
size at most <em>k</em>.)
It should have the following API.

<blockquote>
<pre><b>public class Subset {</b>
<b>   public static void main(String[] args)</b>
<b>}</b>
</pre>
</blockquote>


<p>
<b>Deliverables.</b>
Submit only <tt>Deque.java</tt>, <tt>RandomizedQueue.java</tt>, and <tt>Sub=
set.java</tt>.
We will supply <tt>algs4.jar</tt>.
Your submission not call library functions except those in
<a href=3D"http://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs=
4/StdIn.html"><tt>StdIn</tt></a>,
<a href=3D"http://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs=
4/StdOut.html"><tt>StdOut</tt></a>,
<a href=3D"http://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs=
4/StdRandom.html"><tt>StdRandom</tt></a>,
<tt>java.lang</tt>, <tt>java.util.Iterator</tt>, and
<tt>java.util.NoSuchElementException</tt>.
In particular, you may not use either <tt>java.util.LinkedList</tt> or <tt>=
java.util.ArrayList</tt>.





<!--
<p><br><Br>

<ADDRESS><SMALL>
This assignment was developed by Kevin Wayne.
<br>Copyright &copy; 2005.
</SMALL>
</ADDRESS>
</BODY></HTML>
-->



</p></body></html>
------MultipartBoundary--1u92IoXnI4ophddh9nX4Ya4zcBOrubzaJ39zkw4SCb------
